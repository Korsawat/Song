{"version":3,"sources":["spotify.js","App.js","reportWebVitals.js","index.js"],"names":["storeAccessToken","token","Cookies","set","expires","clearAccessToken","remove","loginUrl","concat","join","App","setToken","useState","songs","setSongs","pairs","setPairs","currentPair","setCurrentPair","progress","setProgress","showRankings","setShowRankings","useEffect","storedToken","get","fetchLikedSongs","handleLogin","totalSongs","length","comparedSongs","filter","song","compared","hash","getTokenFromUrl","window","location","substring","accessToken","URLSearchParams","access_token","_token","async","data","offset","allSongs","url","headers","Authorization","response","fetch","ok","errorText","text","console","error","status","Error","json","items","total","message","map","track","wins","getLikedSongs","initialPairs","generatePairs","pickRandomPair","i","j","push","remainingPairs","pair","randomIndex","Math","floor","random","handleChoice","winner","loser","updatedSongs","id","handleLogout","React","createElement","className","Fragment","rankSongs","ranked","sort","a","b","rank","forEach","index","key","name","onClick","src","album","images","alt","style","width","round","handleTie","showRankedSongs","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b0193b19.chunk.js","sourcesContent":["// spotify.js\r\n\r\nimport Cookies from 'js-cookie';\r\n\r\nconst AUTH_ENDPOINT = 'https://accounts.spotify.com/authorize';\r\nconst REDIRECT_URI = 'https://korsawat.github.io/Song/';\r\nconst CLIENT_ID = \"e09c3389cd8f4a0c92f03e1bc5b423c2\"; // Replace with your Spotify client ID\r\nconst SCOPES = ['user-library-read'];\r\n\r\nexport const storeAccessToken = (token) => {\r\n  Cookies.set('spotify_access_token', token, { expires: 30 }); // Token expires in 30 days\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n  return Cookies.get('spotify_access_token');\r\n};\r\n\r\nexport const clearAccessToken = () => {\r\n  Cookies.remove('spotify_access_token');\r\n};\r\n\r\nexport const loginUrl = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scope=${SCOPES.join(\r\n  '%20'\r\n)}&response_type=token&show_dialog=true`;\r\n\r\nexport const getTokenFromUrl = () => {\r\n  const hash = window.location.hash.substring(1);\r\n  const hashParams = new URLSearchParams(hash);\r\n  const accessToken = hashParams.get('access_token');\r\n\r\n  if (accessToken) {\r\n    storeAccessToken(accessToken);\r\n  }\r\n\r\n  return { access_token: accessToken };\r\n};\r\n\r\nexport const getLikedSongs = async (token) => {\r\n  const limit = 50;\r\n  let offset = 0;\r\n  let allSongs = [];\r\n  let data;\r\n\r\n  try {\r\n    do {\r\n      const url = 'https://api.spotify.com/v1/me/tracks?limit=' + limit + '&offset=' + offset;\r\n      const headers = {\r\n        Authorization: 'Bearer ' + token,\r\n      };\r\n\r\n      const response = await fetch(url, { headers });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Response Status:', response.status);\r\n        console.error('Response Text:', errorText);\r\n        if (response.status === 403) {\r\n          throw new Error('Access forbidden. Check Spotify API permissions.');\r\n        } else {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n      }\r\n\r\n      data = await response.json();\r\n      allSongs = allSongs.concat(data.items);\r\n      offset += limit;\r\n    } while (offset < data.total);\r\n  } catch (error) {\r\n    console.error('Error fetching songs:', error.message);\r\n    throw error;\r\n  }\r\n\r\n  return allSongs.map((song) => ({\r\n    track: song.track,\r\n    compared: false,\r\n    wins: 0,\r\n  }));\r\n};\r\n","// App.js\n\nimport React, { useState, useEffect } from \"react\";\nimport {\n  storeAccessToken,\n  getAccessToken,\n  clearAccessToken,\n  loginUrl,\n  getTokenFromUrl,\n  getLikedSongs,\n} from \"./spotify\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [token, setToken] = useState(\"\");\n  const [songs, setSongs] = useState([]);\n  const [pairs, setPairs] = useState([]);\n  const [currentPair, setCurrentPair] = useState([null, null]);\n  const [progress, setProgress] = useState(0);\n  const [showRankings, setShowRankings] = useState(false);\n\n  useEffect(() => {\n    const storedToken = getAccessToken();\n    if (storedToken) {\n      setToken(storedToken);\n      fetchLikedSongs(storedToken);\n    } else {\n      handleLogin();\n    }\n  }, []);\n\n  useEffect(() => {\n    const totalSongs = songs.length;\n    const comparedSongs = songs.filter((song) => song.compared).length;\n    const percentage = totalSongs > 0 ? (comparedSongs / totalSongs) * 100 : 0;\n    setProgress(percentage);\n  }, [songs]);\n\n  const handleLogin = () => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\"; // Clear the hash after token extraction\n\n    const _token = hash.access_token;\n    if (_token) {\n      setToken(_token);\n      storeAccessToken(_token); // Use storeAccessToken here\n      fetchLikedSongs(_token);\n    }\n  };\n\n  const fetchLikedSongs = async (accessToken) => {\n    try {\n      const songs = await getLikedSongs(accessToken);\n      setSongs(songs.map((song) => ({ ...song, compared: false })));\n      setProgress(0);\n      const initialPairs = generatePairs(songs);\n      setPairs(initialPairs);\n      pickRandomPair(initialPairs);\n    } catch (error) {\n      console.error(\"Error fetching songs:\", error.message);\n      clearAccessToken();\n    }\n  };\n\n  const generatePairs = (songs) => {\n    const pairs = [];\n    for (let i = 0; i < songs.length - 1; i++) {\n      for (let j = i + 1; j < songs.length; j++) {\n        pairs.push([songs[i], songs[j]]);\n      }\n    }\n    return pairs;\n  };\n\n  const pickRandomPair = (pairs) => {\n    const remainingPairs = pairs.filter(\n      (pair) => !pair[0].compared || !pair[1].compared\n    );\n    if (remainingPairs.length === 0) {\n      setShowRankings(true);\n      return;\n    }\n    const randomIndex = Math.floor(Math.random() * remainingPairs.length);\n    setCurrentPair(remainingPairs[randomIndex]);\n    setPairs(pairs.filter((pair) => pair !== remainingPairs[randomIndex]));\n  };\n\n  const handleChoice = (winner, loser) => {\n    const updatedSongs = songs.map((song) =>\n      song.track.id === winner.track.id\n        ? { ...song, compared: true, wins: (song.wins || 0) + 1 }\n        : song\n    );\n    setSongs(updatedSongs);\n    pickRandomPair(pairs);\n  };\n\n  const handleTie = () => {\n    const updatedSongs = songs.map((song) => {\n      if (\n        song.track.id === currentPair[0].track.id ||\n        song.track.id === currentPair[1].track.id\n      ) {\n        return { ...song, compared: true, wins: (song.wins || 0) + 1 };\n      }\n      return song;\n    });\n    setSongs(updatedSongs);\n    pickRandomPair(pairs);\n  };\n\n  const showRankedSongs = () => {\n    setShowRankings(true);\n  };\n\n  const rankSongs = () => {\n    const ranked = songs.sort((a, b) => (b.wins || 0) - (a.wins || 0));\n    let rank = 1;\n    ranked.forEach((song, index) => {\n      if (index > 0 && (song.wins || 0) !== (ranked[index - 1].wins || 0)) {\n        rank = index + 1;\n      }\n      song.rank = rank;\n    });\n    return ranked;\n  };\n\n  const handleLogout = () => {\n    clearAccessToken();\n    setToken(\"\");\n    setSongs([]);\n    setPairs([]);\n    setCurrentPair([null, null]);\n    setProgress(0);\n    setShowRankings(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">Song Comparison</div>\n\n      {!token ? (\n        <a href={loginUrl}>Login to Spotify</a>\n      ) : (\n        <>\n          <div className=\"total-liked-songs\">\n            Total Liked Songs: {songs.length}\n          </div>\n\n          {showRankings ? (\n            <div className=\"ranked-songs\">\n              <h2>Ranked Songs</h2>\n              <table>\n                <thead>\n                  <tr>\n                    <th>Rank</th>\n                    <th>Song Name</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {rankSongs().map((song) => (\n                    <tr key={song.track.id}>\n                      <td>{song.rank}</td>\n                      <td>{song.track.name}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              <div className=\"buttons\">\n                <div className=\"buttons-container\">\n                  <button onClick={handleLogout}>Logout</button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <>\n              {currentPair[0] && currentPair[1] ? (\n                <>\n                  <div className=\"song-container\">\n                    <div\n                      className=\"song\"\n                      onClick={() =>\n                        handleChoice(currentPair[0], currentPair[1])\n                      }\n                    >\n                      <img\n                        src={currentPair[0].track.album.images[0].url}\n                        alt={currentPair[0].track.name}\n                      />\n                      <div>{currentPair[0].track.name}</div>\n                    </div>\n                    <div\n                      className=\"song\"\n                      onClick={() =>\n                        handleChoice(currentPair[1], currentPair[0])\n                      }\n                    >\n                      <img\n                        src={currentPair[1].track.album.images[0].url}\n                        alt={currentPair[1].track.name}\n                      />\n                      <div>{currentPair[1].track.name}</div>\n                    </div>\n                  </div>\n\n                  <div className=\"progress-container\">\n                    <div className=\"progress-bar\">\n                      <div\n                        className=\"progress\"\n                        style={{ width: `${progress}%` }}\n                      >\n                        {Math.round(progress)}%\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"buttons\">\n                    <div className=\"buttons-container\">\n                      <button onClick={handleTie}>Can't Decide</button>\n                    </div>\n                    <button onClick={showRankedSongs}>Show Ranked Songs</button>\n                    <button onClick={handleLogout}>Logout</button>\n                  </div>\n                </>\n              ) : (\n                <div>Loading...</div>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}