{"version":3,"sources":["spotify.js","App.js","reportWebVitals.js","index.js"],"names":["loginUrl","concat","process","join","App","token","setToken","useState","songs","setSongs","pairs","setPairs","currentPair","setCurrentPair","progress","setProgress","showRankings","setShowRankings","useEffect","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","_token","access_token","async","data","offset","allSongs","response","fetch","headers","Authorization","json","items","total","map","song","track","compared","wins","getLikedSongs","then","initialPairs","generatePairs","pickRandomPair","totalSongs","length","comparedSongs","filter","i","j","push","remainingPairs","pair","randomIndex","Math","floor","random","handleChoice","winner","loser","updatedSongs","id","React","createElement","className","Fragment","rankSongs","ranked","sort","a","b","rank","forEach","index","key","name","onClick","src","album","images","url","alt","style","width","round","handleTie","showRankedSongs","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6bd7c7e5.chunk.js","sourcesContent":["// spotify.js\r\n\r\nconst AUTH_ENDPOINT = 'https://accounts.spotify.com/authorize';\r\nconst REDIRECT_URI = 'http://localhost:3000/callback';\r\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID; // Replace with your Spotify client ID\r\nconst SCOPES = [\r\n  'user-library-read', \r\n];\r\n\r\nexport const loginUrl = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scope=${SCOPES.join(\r\n  '%20'\r\n)}&response_type=token&show_dialog=true`;\r\n\r\nexport const getTokenFromUrl = () => {\r\n  return window.location.hash.substring(1).split('&').reduce((initial, item) => {\r\n    let parts = item.split('=');\r\n    initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    return initial;\r\n  }, {});\r\n};\r\n\r\nexport const getLikedSongs = async (token) => {\r\n  const limit = 50; // Number of items to fetch per request\r\n  let offset = 0;\r\n  let allSongs = [];\r\n\r\n  let data; // Declare data here to avoid 'data' is not defined error\r\n\r\n  do {\r\n    const response = await fetch(`https://api.spotify.com/v1/me/tracks?limit=${limit}&offset=${offset}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    data = await response.json(); // Assign data here after fetch\r\n\r\n    allSongs = [...allSongs, ...data.items];\r\n    offset += limit;\r\n  } while (offset < data.total);\r\n\r\n  return allSongs.map((song) => ({\r\n    track: song.track,\r\n    compared: false,\r\n    wins: 0,\r\n  }));\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { loginUrl, getTokenFromUrl, getLikedSongs } from \"./spotify\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [token, setToken] = useState(\"\");\n  const [songs, setSongs] = useState([]);\n  const [pairs, setPairs] = useState([]);\n  const [currentPair, setCurrentPair] = useState([null, null]);\n  const [progress, setProgress] = useState(0);\n  const [showRankings, setShowRankings] = useState(false);\n\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n    if (_token) {\n      setToken(_token);\n      getLikedSongs(_token).then((songs) => {\n        setSongs(songs.map(song => ({ ...song, compared: false })));\n        setProgress(0);\n        const initialPairs = generatePairs(songs);\n        setPairs(initialPairs);\n        pickRandomPair(initialPairs);\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    // Calculate the percentage of songs left to compare\n    const totalSongs = songs.length;\n    const comparedSongs = songs.filter(song => song.compared).length;\n    const percentage = (comparedSongs / totalSongs) * 100;\n    setProgress(percentage);\n  }, [songs]);\n\n  const generatePairs = (songs) => {\n    const pairs = [];\n    for (let i = 0; i < songs.length - 1; i++) {\n      for (let j = i + 1; j < songs.length; j++) {\n        pairs.push([songs[i], songs[j]]);\n      }\n    }\n    return pairs;\n  };\n\n  const pickRandomPair = (pairs) => {\n    const remainingPairs = pairs.filter(pair => !pair[0].compared || !pair[1].compared);\n    if (remainingPairs.length === 0) {\n      setShowRankings(true);\n      return;\n    }\n    const randomIndex = Math.floor(Math.random() * remainingPairs.length);\n    setCurrentPair(remainingPairs[randomIndex]);\n    setPairs(pairs.filter(pair => pair !== remainingPairs[randomIndex]));\n  };\n\n  const handleChoice = (winner, loser) => {\n    const updatedSongs = songs.map(song =>\n      song.track.id === winner.track.id\n        ? { ...song, compared: true, wins: (song.wins || 0) + 1 }\n        : song\n    );\n    setSongs(updatedSongs);\n    pickRandomPair(pairs);\n  };\n\n  const handleTie = () => {\n    const updatedSongs = songs.map(song => {\n      if (song.track.id === currentPair[0].track.id || song.track.id === currentPair[1].track.id) {\n        return { ...song, compared: true, wins: (song.wins || 0) + 1 };\n      }\n      return song;\n    });\n    setSongs(updatedSongs);\n    pickRandomPair(pairs);\n  };\n\n  const showRankedSongs = () => {\n    setShowRankings(true);\n  };\n\n  const rankSongs = () => {\n    const ranked = songs.sort((a, b) => (b.wins || 0) - (a.wins || 0));\n    let rank = 1;\n    ranked.forEach((song, index) => {\n      if (index > 0 && (song.wins || 0) !== (ranked[index - 1].wins || 0)) {\n        rank = index + 1;\n      }\n      song.rank = rank;\n    });\n    return ranked;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">Song Comparison</div>\n\n      {!token ? (\n        <a href={loginUrl}>Login to Spotify</a>\n      ) : (\n        <>\n          <div className=\"total-liked-songs\">\n            Total Liked Songs: {songs.length}\n          </div>\n\n          {showRankings ? (\n            <div className=\"ranked-songs\">\n              <h2>Ranked Songs</h2>\n              <table>\n                <thead>\n                  <tr>\n                    <th>Rank</th>\n                    <th>Song Name</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {rankSongs().map(song => (\n                    <tr key={song.track.id}>\n                      <td>{song.rank}</td>\n                      <td>{song.track.name}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <>\n              {currentPair[0] && currentPair[1] ? (\n                <>\n                  <div className=\"song-container\">\n                    <div className=\"song\" onClick={() => handleChoice(currentPair[0], currentPair[1])}>\n                      <img src={currentPair[0].track.album.images[0].url} alt={currentPair[0].track.name} />\n                      <div>{currentPair[0].track.name}</div>\n                    </div>\n                    <div className=\"song\" onClick={() => handleChoice(currentPair[1], currentPair[0])}>\n                      <img src={currentPair[1].track.album.images[0].url} alt={currentPair[1].track.name} />\n                      <div>{currentPair[1].track.name}</div>\n                    </div>\n                  </div>\n\n                  <div className=\"progress-container\">\n                    <div className=\"progress-bar\">\n                      <div className=\"progress\" style={{ width: `${progress}%` }}>\n                        {Math.round(progress)}%\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"buttons\">\n                    <div className=\"buttons-container\">\n                      <button onClick={handleTie}>Can't Decide</button>\n                    </div>\n                    <button onClick={showRankedSongs}>Show Ranked Songs</button>\n                  </div>\n                </>\n              ) : (\n                <div>Loading...</div>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}