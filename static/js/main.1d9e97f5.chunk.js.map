{"version":3,"sources":["spotify.js","App.js","reportWebVitals.js","index.js"],"names":["loginUrl","concat","join","getTokenFromUrl","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","App","token","setToken","useState","songs","setSongs","pairs","setPairs","currentPair","setCurrentPair","progress","setProgress","showRankings","setShowRankings","player","setPlayer","deviceId","setDeviceId","useEffect","_token","access_token","async","data","offset","allSongs","response","fetch","headers","Authorization","ok","Error","status","json","items","total","map","song","track","compared","wins","getLikedSongs","then","initialPairs","generatePairs","pickRandomPair","script","document","createElement","src","body","appendChild","onSpotifyWebPlaybackSDKReady","Spotify","Player","name","getOAuthToken","cb","addListener","_ref","device_id","console","log","_ref2","connect","totalSongs","length","comparedSongs","filter","i","j","push","remainingPairs","pair","randomIndex","Math","floor","random","handleChoice","winner","loser","updatedSongs","id","React","className","Fragment","rankSongs","ranked","sort","a","b","rank","forEach","index","key","onClick","album","images","url","alt","style","width","round","handleTie","showRankedSongs","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1d9e97f5.chunk.js","sourcesContent":["// spotify.js\r\n\r\nconst AUTH_ENDPOINT = 'https://accounts.spotify.com/authorize';\r\nconst REDIRECT_URI = 'https://korsawat.github.io/Song/';\r\nconst CLIENT_ID = \"e09c3389cd8f4a0c92f03e1bc5b423c2\"; // Replace with your Spotify client ID\r\nconst SCOPES = [\r\n  'user-library-read', \r\n];\r\n\r\nexport const loginUrl = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scope=${SCOPES.join(\r\n  '%20'\r\n)}&response_type=token&show_dialog=true`;\r\n\r\nexport const getTokenFromUrl = () => {\r\n  return window.location.hash.substring(1).split('&').reduce((initial, item) => {\r\n    let parts = item.split('=');\r\n    initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    return initial;\r\n  }, {});\r\n};\r\n\r\nexport const getLikedSongs = async (token) => {\r\n  const limit = 50; // Number of items to fetch per request\r\n  let offset = 0;\r\n  let allSongs = [];\r\n\r\n  let data;\r\n\r\n  do {\r\n    const response = await fetch(`https://api.spotify.com/v1/me/tracks?limit=${limit}&offset=${offset}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    // Check for 403 Forbidden error handling\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    data = await response.json();\r\n    allSongs = [...allSongs, ...data.items];\r\n    offset += limit;\r\n  } while (offset < data.total);\r\n\r\n  return allSongs.map((song) => ({\r\n    track: song.track,\r\n    compared: false,\r\n    wins: 0,\r\n  }));\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { loginUrl, getTokenFromUrl, getLikedSongs } from \"./spotify\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [token, setToken] = useState(\"\");\n  const [songs, setSongs] = useState([]);\n  const [pairs, setPairs] = useState([]);\n  const [currentPair, setCurrentPair] = useState([null, null]);\n  const [progress, setProgress] = useState(0);\n  const [showRankings, setShowRankings] = useState(false);\n  const [player, setPlayer] = useState(null);\n  const [deviceId, setDeviceId] = useState(\"\");\n\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n    if (_token) {\n      setToken(_token);\n      getLikedSongs(_token).then((songs) => {\n        setSongs(songs.map((song) => ({ ...song, compared: false })));\n        setProgress(0);\n        const initialPairs = generatePairs(songs);\n        setPairs(initialPairs);\n        pickRandomPair(initialPairs);\n      });\n\n      // Initialize Spotify Player\n      const script = document.createElement(\"script\");\n      script.src = \"https://sdk.scdn.co/spotify-player.js\";\n      script.async = true;\n\n      document.body.appendChild(script);\n\n      window.onSpotifyWebPlaybackSDKReady = () => {\n        const player = new window.Spotify.Player({\n          name: \"Web Playback SDK\",\n          getOAuthToken: (cb) => {\n            cb(_token);\n          },\n        });\n\n        player.addListener(\"ready\", ({ device_id }) => {\n          setDeviceId(device_id);\n          console.log(\"Ready with Device ID\", device_id);\n        });\n\n        player.addListener(\"not_ready\", ({ device_id }) => {\n          console.log(\"Device ID has gone offline\", device_id);\n        });\n\n        player.connect();\n        setPlayer(player);\n      };\n    }\n  }, []);\n\n  useEffect(() => {\n    const totalSongs = songs.length;\n    const comparedSongs = songs.filter((song) => song.compared).length;\n    const percentage = (comparedSongs / totalSongs) * 100;\n    setProgress(percentage);\n  }, [songs]);\n\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    console.log('Token from URL:', hash.access_token); // Log the token immediately after retrieval\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n    if (_token) {\n      setToken(_token);\n      console.log('Token in state:', _token); // Log the token after storing it in state\n      // Rest of your code...\n    }\n  }, []);\n  \n\n  const generatePairs = (songs) => {\n    const pairs = [];\n    for (let i = 0; i < songs.length - 1; i++) {\n      for (let j = i + 1; j < songs.length; j++) {\n        pairs.push([songs[i], songs[j]]);\n      }\n    }\n    return pairs;\n  };\n\n  const pickRandomPair = (pairs) => {\n    const remainingPairs = pairs.filter(\n      (pair) => !pair[0].compared || !pair[1].compared\n    );\n    if (remainingPairs.length === 0) {\n      setShowRankings(true);\n      return;\n    }\n    const randomIndex = Math.floor(Math.random() * remainingPairs.length);\n    setCurrentPair(remainingPairs[randomIndex]);\n    setPairs(pairs.filter((pair) => pair !== remainingPairs[randomIndex]));\n  };\n\n  const handleChoice = (winner, loser) => {\n    const updatedSongs = songs.map((song) =>\n      song.track.id === winner.track.id\n        ? { ...song, compared: true, wins: (song.wins || 0) + 1 }\n        : song\n    );\n    setSongs(updatedSongs);\n    pickRandomPair(pairs);\n  };\n\n  const handleTie = () => {\n    const updatedSongs = songs.map((song) => {\n      if (\n        song.track.id === currentPair[0].track.id ||\n        song.track.id === currentPair[1].track.id\n      ) {\n        return { ...song, compared: true, wins: (song.wins || 0) + 1 };\n      }\n      return song;\n    });\n    setSongs(updatedSongs);\n    pickRandomPair(pairs);\n  };\n\n  const showRankedSongs = () => {\n    setShowRankings(true);\n  };\n\n  const rankSongs = () => {\n    const ranked = songs.sort((a, b) => (b.wins || 0) - (a.wins || 0));\n    let rank = 1;\n    ranked.forEach((song, index) => {\n      if (index > 0 && (song.wins || 0) !== (ranked[index - 1].wins || 0)) {\n        rank = index + 1;\n      }\n      song.rank = rank;\n    });\n    return ranked;\n  };\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">Song Comparison</div>\n\n      {!token ? (\n        <a href={loginUrl}>Login to Spotify</a>\n      ) : (\n        <>\n          <div className=\"total-liked-songs\">\n            Total Liked Songs: {songs.length}\n          </div>\n\n          {showRankings ? (\n            <div className=\"ranked-songs\">\n              <h2>Ranked Songs</h2>\n              <table>\n                <thead>\n                  <tr>\n                    <th>Rank</th>\n                    <th>Song Name</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {rankSongs().map((song) => (\n                    <tr key={song.track.id}>\n                      <td>{song.rank}</td>\n                      <td>{song.track.name}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <>\n              {currentPair[0] && currentPair[1] ? (\n                <>\n                  <div className=\"song-container\">\n                    <div\n                      className=\"song\"\n                      onClick={() =>\n                        handleChoice(currentPair[0], currentPair[1])\n                      }\n                    >\n                      <img\n                        src={currentPair[0].track.album.images[0].url}\n                        alt={currentPair[0].track.name}\n                      />\n                      <div>{currentPair[0].track.name}</div>\n                    </div>\n                    <div\n                      className=\"song\"\n                      onClick={() =>\n                        handleChoice(currentPair[1], currentPair[0])\n                      }\n                    >\n                      <img\n                        src={currentPair[1].track.album.images[0].url}\n                        alt={currentPair[1].track.name}\n                      />\n                      <div>{currentPair[1].track.name}</div>\n                    </div>\n                  </div>\n\n                  <div className=\"progress-container\">\n                    <div className=\"progress-bar\">\n                      <div\n                        className=\"progress\"\n                        style={{ width: `${progress}%` }}\n                      >\n                        {Math.round(progress)}%\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"buttons\">\n                    <div className=\"buttons-container\">\n                      <button onClick={handleTie}>Can't Decide</button>\n                    </div>\n                    <button onClick={showRankedSongs}>Show Ranked Songs</button>\n                  </div>\n                </>\n              ) : (\n                <div>Loading...</div>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}